import os, asyncio, httpx
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
from bot_instance import bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from ..keyboards import main_menu
from ..states import Form

router = Router()

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE = os.getenv("API_BASE", "http://127.0.0.1:8000")
BOT_SECRET = os.getenv("BOT_SECRET")
ADMIN_TG_IDS = set(map(int, os.getenv("ADMIN_TG_IDS","").split(","))) if os.getenv("ADMIN_TG_IDS") else set()

def api_url(path: str) -> str:
    return f"{API_BASE.rstrip('/')}/{path.lstrip('/')}"

async def fetch_user_entries(tg_id: int):
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            resp = await client.get(api_url(f"api/users/{tg_id}/entries/"), headers=headers)
            resp.raise_for_status()
            try:
                return resp.json()
            except Exception:
                return None
    except Exception:
        return None

async def fetch_position_for_event(event_id: int, tg_id: int):
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET
    try:
        async with httpx.AsyncClient(timeout=8.0) as client:
            resp = await client.get(api_url(f"api/events/{event_id}/position/"),
                                    params={"telegram_id": tg_id}, headers=headers)
            status = resp.status_code
            text = resp.text
            try:
                data = resp.json()
            except Exception:
                data = None
            return {"status": status, "raw": text, "data": data}
    except Exception as e:
        return {"status": None, "raw": str(e), "data": None}


def build_entries_text(entries: list, positions: dict) -> str:
    lines = []
    for ent in entries:
        eid = ent.get("id")
        ev = ent.get("event") or {}
        ev_name = ev.get("name", f"event:{ev.get('id')}")
        status = ent.get("status", "unknown")
        pos_info = positions.get(eid, {})
        pos = pos_info.get("position")
        eta = pos_info.get("eta")
        samples = pos_info.get("n_samples", 0)
        if pos is not None:
            eta_str = f"~{eta} –º–∏–Ω" if eta is not None else "‚âà –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            lines.append(f"üÜî {eid} ‚Äî {ev_name} ‚Äî –ø–æ–∑–∏—Ü–∏—è {pos} ‚Äî {eta_str} (n={samples})")
        else:
            lines.append(f"üÜî {eid} ‚Äî {ev_name} ‚Äî —Å—Ç–∞—Ç—É—Å: {status} ‚Äî ETA: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    header = f"<b>–£ –≤–∞—Å <i>{len(entries)}</i> –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫:</b>\n\n"
    return header + "\n".join(lines)


def build_entries_kb(entries: list) -> InlineKeyboardMarkup:
    """
    –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏: [‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #id]
    –í–Ω–∏–∑—É: [‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ (N)] –∏ [üîÅ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë]
    """
    rows = []
    for ent in entries:
        eid = ent.get("id")
        rows.append([InlineKeyboardButton(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{eid}", callback_data=f"cancel_entry:{eid}")])
    # –î–æ–±–∞–≤–∏–º —Å—Ç—Ä–æ–∫—É —Å "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ" –∏ "–û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë"
    rows.append([
        InlineKeyboardButton(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ ({len(entries)})", callback_data="cancel_all"),
        InlineKeyboardButton(text="üîÅ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë", callback_data="refresh_all")
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)


# ----------------------
# HANDLER: –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –æ—á–µ—Ä–µ–¥–∏ (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
# ----------------------
@router.message(F.text == 'üìã –ú–æ–∏ –æ—á–µ—Ä–µ–¥–∏')
async def cmd_queue(message: Message):
    tg_id = message.from_user.id

    entries = await fetch_user_entries(tg_id)
    if entries is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not entries:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏/ETA –ø–æ —Å–æ–±—ã—Ç–∏—è–º (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞–∂–¥—ã–π event_id)
    positions = {}
    event_ids = {}
    for e in entries:
        ev = e.get("event") or {}
        ev_id = ev.get("id")
        if ev_id is None:
            continue
        event_ids.setdefault(ev_id, []).append(e['id'])

    for ev_id in event_ids.keys():
        resp = await fetch_position_for_event(ev_id, tg_id)
        data = resp.get("data")
        if data and isinstance(data, dict) and data.get("position") is not None:
            try:
                pos_val = int(data.get("position"))
            except Exception:
                pos_val = data.get("position")
            eta = data.get("eta_mean_minutes") or data.get("eta_minutes")
            n_samples = data.get("n_samples", 0)
            for eid in event_ids[ev_id]:
                positions[eid] = {"position": pos_val, "eta": eta, "n_samples": n_samples}
        else:
            for eid in event_ids[ev_id]:
                positions[eid] = {"position": None, "eta": None, "n_samples": 0}

    text = build_entries_text(entries, positions)
    kb = build_entries_kb(entries)

    await message.answer(text, reply_markup=kb)


# ----------------------
# CALLBACK: –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ)
# ----------------------
@router.callback_query(lambda c: c.data == "refresh_all")
async def callback_refresh_all(query: CallbackQuery):
    await query.answer()
    try:
        await query.message.delete()
    except Exception:
        pass
    tg_id = query.from_user.id

    entries = await fetch_user_entries(tg_id)
    if entries is None:
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏.")
        return

    positions = {}
    event_ids = {}
    for e in entries:
        ev = e.get("event") or {}
        ev_id = ev.get("id")
        if ev_id is None:
            continue
        event_ids.setdefault(ev_id, []).append(e['id'])

    for ev_id in event_ids.keys():
        resp = await fetch_position_for_event(ev_id, tg_id)
        data = resp.get("data")
        if data and isinstance(data, dict) and data.get("position") is not None:
            try:
                pos_val = int(data.get("position"))
            except Exception:
                pos_val = data.get("position")
            eta = data.get("eta_mean_minutes") or data.get("eta_minutes")
            n_samples = data.get("n_samples", 0)
            for eid in event_ids[ev_id]:
                positions[eid] = {"position": pos_val, "eta": eta, "n_samples": n_samples}
        else:
            for eid in event_ids[ev_id]:
                positions[eid] = {"position": None, "eta": None, "n_samples": 0}

    new_text = build_entries_text(entries, positions)
    new_kb = build_entries_kb(entries)
    try:
        await query.message.edit_text(new_text, reply_markup=new_kb)
        await query.answer("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception:
        await query.message.answer(new_text, reply_markup=new_kb)
        await query.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")


# ----------------------
# CALLBACK: –æ—Ç–º–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
# ----------------------
@router.callback_query(lambda c: c.data and c.data.startswith("cancel_entry:"))
async def callback_cancel_entry(query: CallbackQuery):
    await query.answer()
    entry_id = int(query.data.split(":", 1)[1])
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET

    try:
        async with httpx.AsyncClient(timeout=8.0) as client:
            resp = await client.post(api_url(f"api/entries/{entry_id}/cancel/"), headers=headers)
            try:
                data = resp.json()
            except Exception:
                data = None
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
        return

    removed = None
    if isinstance(data, dict):
        removed = data.get("cancelled") or data.get("removed")

    if removed:
        # —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–∞—Ç–∫–æ
        try:
            await query.message.answer(f"–ó–∞—è–≤–∫–∞ #{entry_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception:
            pass
    else:
        # –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 200/204 ‚Äî —Å—á–∏—Ç–∞–µ–º –æ—Ç–º–µ–Ω–æ–π; –∏–Ω–∞—á–µ –ø–æ–∫–∞–∂–µ–º –∫–æ–¥
        if resp.status_code in (200, 204):
            try:
                await query.message.answer(f"–ó–∞—è–≤–∫–∞ #{entry_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–º–µ–Ω—ë–Ω–Ω–∞—è.")
            except Exception:
                pass
        else:
            await query.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É (–∫–æ–¥ {resp.status_code}).")

    # –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ (–≤—ã–∑–æ–≤ refresh_all)
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å)
    try:
        await callback_refresh_all(query)
    except Exception:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –≤—ã–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
        await callback_refresh_all(query)


# ----------------------
# CALLBACK: –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
# ----------------------
@router.callback_query(lambda c: c.data == "cancel_all")
async def callback_cancel_all(query: CallbackQuery):
    await query.answer()
    try:
        await query.message.delete()
    except Exception:
        pass
    tg_id = query.from_user.id
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET

    # –ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    entries = await fetch_user_entries(tg_id)
    if not entries:
        await query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    cancelled = []
    errors = []
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            for ent in entries:
                eid = ent.get("id")
                try:
                    r = await client.post(api_url(f"api/entries/{eid}/cancel/"), headers=headers)
                    if r.status_code in (200, 204):
                        cancelled.append(eid)
                    else:
                        errors.append((eid, r.status_code))
                except Exception as e:
                    errors.append((eid, str(e)))
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–º–µ–Ω–µ: {e}")
        return

    await query.message.answer(f"–û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(cancelled)}.")
    if errors:
        await query.message.answer(f"–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {errors[:5]}")  # –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á–µ—Ç

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    try:
        await callback_refresh_all(query)
    except Exception:
        await callback_refresh_all(query)

@router.message(Command(commands=["help"]))
async def cmd_help(message: Message):
    await message.answer(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/events ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤\n"
        "/queue ‚Äî –º–æ–∏ –æ—á–µ—Ä–µ–¥–∏\n"
        "/pos <event_id> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/next <event_id> ‚Äî (–æ–ø–µ—Ä–∞—Ç–æ—Ä) –≤—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ"
    )

@router.message(CommandStart())
async def start(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer("<b>–ü—Ä–∏–≤–µ—Ç!</b> –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@router.message(F.text == "üé° –°—Ç–µ–Ω–¥—ã")
async def btn_show_events(message: types.Message, state: FSMContext):
    # –Ω–µ –ø—Ä–æ—Å–∏–º –∏–º—è ‚Äî –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å—Ç–∞–≤–∏–º –≤ state —á—Ç–æ-—Ç–æ –ø–æ–¥ –∏–º–µ–Ω–µ–º
    # —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞—Ç—å full_name, username
    # –±–µ—Ä–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ telegram, –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∏–Ω–∞—á–µ username, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ
    full_name = message.from_user.full_name or message.from_user.username or ""
    await state.update_data(name=full_name, tg_id=message.from_user.id, username=message.from_user.username)

    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET

    try:
        async with httpx.AsyncClient() as client:
            resp = await client.get(api_url("api/events/"), headers=headers, timeout=10.0)
            resp.raise_for_status()
            events = resp.json()
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤ (—Å–µ—Ä–≤–µ—Ä).", reply_markup=main_menu)
        return

    if not events:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤.", reply_markup=main_menu)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=e["name"], callback_data=f"ev:{e['id']}")] for e in events
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–Ω–¥:", reply_markup=kb)
    await state.set_state(Form.choose_event)

# helper: –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
async def send_events_list(chat_id: int, state: FSMContext | None = None) -> bool:
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET

    try:
        async with httpx.AsyncClient() as client:
            resp = await client.get(api_url("api/events/"), headers=headers, timeout=10.0)
            resp.raise_for_status()
            events = resp.json()
    except Exception:
        await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤ (—Å–µ—Ä–≤–µ—Ä). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return False

    if not events:
        await bot.send_message(chat_id, "–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤.")
        return False

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=e["name"], callback_data=f"ev:{e['id']}")] for e in events
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–Ω–¥:", reply_markup=kb)

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ state ‚Äî —Å—Ç–∞–≤–∏–º –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if state is not None:
        await state.set_state(Form.choose_event)
    return True


# 1) –ü–æ–ª—É—á–∞–µ–º –∏–º—è
@router.message()
async def got_name(message: types.Message, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
    # try:
    #     await message.delete()
    # except Exception:
    #     pass

    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if await state.get_state() != Form.name.state:
        return

    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–ø–∏—à–∏ –∏–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(name=name, tg_id=message.from_user.id, username=message.from_user.username)

    # –í—ã–∑–æ–≤ helper'–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤ –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ choose_event
    ok = await send_events_list(chat_id=message.from_user.id, state=state)
    if not ok:
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–µ–Ω–¥—ã ‚Äî –æ—á–∏—â–∞–µ–º state, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä—è—Ç—å
        await state.clear()


# 2) –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ –∏ –∫–Ω–æ–ø–∫–∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–û—Ç–º–µ–Ω–∞
@router.callback_query(lambda c: c.data and c.data.startswith("ev:"))
async def ev_info(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    event_id = int(query.data.split(":",1)[1])
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET
    # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    async with httpx.AsyncClient() as client:
        resp = await client.get(api_url(f"api/events/"), headers=headers)
        resp.raise_for_status()
        events = resp.json()
    ev = next((e for e in events if e["id"]==event_id), None)
    if not ev:
        await query.message.answer("–û—à–∏–±–∫–∞: —Å—Ç–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    eta_text = f"<b>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ</b> –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: <i>{ev.get('avg_service_minutes', 3)} –º–∏–Ω—É—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞</i>"
    text = f"<b>–°—Ç–µ–Ω–¥: {ev['name']}</b>\n{ev.get('description','')}\n\n{eta_text}\n\n–ù–∞–∂–º–∏—Ç–µ <b><i>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</i></b>, —á—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–µ–Ω–¥."
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{event_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")]
    ])
    await query.message.answer(text, reply_markup=kb)
    await state.update_data(selected_event=event_id)
    await state.set_state(Form.confirm_event)

@router.callback_query(lambda c: c.data == "cancel_action")
async def cancel_action_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    # –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É/—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    try:
        await query.message.delete()
    except Exception:
        pass

    # –≤—ã–∑—ã–≤–∞–µ–º helper, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç state
    ok = await send_events_list(chat_id=query.from_user.id, state=state)
    if not ok:
        await bot.send_message(query.from_user.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–µ–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


# 3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API
@router.callback_query(lambda c: c.data and c.data.startswith("confirm:"))
async def confirm_join_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await query.message.delete()
    data = await state.get_data()
    name = data.get("name")
    tg_id = data.get("tg_id")
    username = data.get("username")
    event_id = int(query.data.split(":",1)[1])

    payload = {"telegram_id": tg_id, "username": username, "full_name": name}
    headers = {"Content-Type":"application/json"}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET

    async with httpx.AsyncClient() as client:
        try:
            resp = await client.post(api_url(f"api/events/{event_id}/join/"), json=payload, headers=headers, timeout=10.0)
            resp.raise_for_status()
            result = resp.json()
        except httpx.HTTPStatusError as e:
            # await query.message.answer(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e.response.status_code}", reply_markup=main_menu)
            await query.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è (", reply_markup=main_menu)
            await state.clear()
            return
        except Exception as e:
            # await query.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: {e}", reply_markup=main_menu)
            await query.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è (", reply_markup=main_menu)
            await state.clear()
            return

    pos = result.get("position")
    eta = result.get("eta_minutes")
    await query.message.answer(f"–¢—ã –≤—Å—Ç–∞–ª –≤ –æ—á–µ—Ä–µ–¥—å. –¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è: {pos}. –û—Ü–µ–Ω–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è: ~{eta} –º–∏–Ω.",
                               reply_markup=main_menu)
                               # reply_markup=InlineKeyboardMarkup(
                               #     inline_keyboard=[
                               #         [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å",
                               #                               callback_data=f"leave:{event_id}")]
                               #     ]
                               # ))
    # await query.message.answer('–¢—ã –∫—Ä—É—Ç–æ–π',reply_markup=main_menu)
    await state.clear()

# 4) –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@router.callback_query(lambda c: c.data and c.data.startswith("leave:"))
async def leave_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    event_id = int(query.data.split(":",1)[1])
    tg_id = query.from_user.id
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET
    async with httpx.AsyncClient() as client:
        resp = await client.post(api_url(f"api/events/{event_id}/leave/"), json={"telegram_id": tg_id}, headers=headers, timeout=10.0)
    await query.message.answer("–¢—ã –≤—ã—à–µ–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏." if resp.json().get("removed") else "–¢—ã –Ω–µ –±—ã–ª –≤ –æ—á–µ—Ä–µ–¥–∏.")
