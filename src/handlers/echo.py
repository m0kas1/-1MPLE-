import os, asyncio, httpx
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
from bot_instance import bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üé° –°—Ç–µ–Ω–¥—ã"), KeyboardButton(text="üìã –ú–æ–∏ –æ—á–µ—Ä–µ–¥–∏")],
        [KeyboardButton(text="üìç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
)



router = Router()

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE = os.getenv("API_BASE", "http://127.0.0.1:8000")
BOT_SECRET = os.getenv("BOT_SECRET")
ADMIN_TG_IDS = set(map(int, os.getenv("ADMIN_TG_IDS","").split(","))) if os.getenv("ADMIN_TG_IDS") else set()

def api_url(path: str) -> str:
    return f"{API_BASE.rstrip('/')}/{path.lstrip('/')}"


class Form(StatesGroup):
    name = State()
    choose_event = State()
    confirm_event = State()
    waiting = State()

# async def set_bot_commands(bot: Bot):
#     commands = [
#         types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å ‚Äî –≤–≤–µ—Å—Ç–∏ –∏–º—è –∏ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–µ–Ω–¥"),
#         types.BotCommand(command="events", description="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–µ–Ω–¥—ã"),
#         types.BotCommand(command="queue", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –æ—á–µ—Ä–µ–¥–∏"),
#         types.BotCommand(command="pos", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é: /pos <event_id>"),
#         types.BotCommand(command="next", description="(–û–ø–µ—Ä–∞—Ç–æ—Ä) –í—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ"),
#         types.BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
#         types.BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
#     ]
#     await bot.set_my_commands(commands)

@router.message(Command(commands=["pos"]))
async def cmd_pos(message: Message):
    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pos <event_id>")
        return
    event_id = parts[1]
    tg_id = message.from_user.id
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET

    try:
        async with httpx.AsyncClient() as client:
            resp = await client.get(api_url(f"api/events/{event_id}/position/"), params={"telegram_id": tg_id}, headers=headers, timeout=10.0)
            resp.raise_for_status()
            data = resp.json()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        return

    pos = data.get("position")
    status = data.get("status")
    eta = data.get("eta_minutes")
    if pos is None:
        await message.answer("–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —ç—Ç–æ—Ç —Å—Ç–µ–Ω–¥.")
    else:
        await message.answer(f"–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {pos}. ETA: ~{eta} –º–∏–Ω. –°—Ç–∞—Ç—É—Å: {status}")


@router.message(F.text == 'üìã –ú–æ–∏ –æ—á–µ—Ä–µ–¥–∏')
async def cmd_queue(message: Message):
    tg_id = message.from_user.id
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET
    # –ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–µ–Ω–¥–æ–≤
    try:
        async with httpx.AsyncClient() as client:
            resp = await client.get(api_url("api/events/"), headers=headers, timeout=10.0)
            resp.raise_for_status()
            events = resp.json()
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤.")
        return

    results = []
    async with httpx.AsyncClient() as client:
        for e in events:
            try:
                resp = await client.get(api_url(f"api/events/{e['id']}/position/"), params={"telegram_id": tg_id}, headers=headers, timeout=5.0)
                resp.raise_for_status()
                data = resp.json()
                if data.get("position"):
                    results.append(f"{e['name']}: –ø–æ–∑–∏—Ü–∏—è {data['position']}, ETA ~{data.get('eta_minutes')}")
            except Exception:
                continue

    if not results:
        await message.answer("–í—ã –Ω–µ —Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.")
    else:
        await message.answer("–¢–≤–æ–∏ –æ—á–µ—Ä–µ–¥–∏:\n" + "\n".join(results))

@router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@router.message(Command(commands=["help"]))
async def cmd_help(message: Message):
    await message.answer(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/events ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤\n"
        "/queue ‚Äî –º–æ–∏ –æ—á–µ—Ä–µ–¥–∏\n"
        "/pos <event_id> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/next <event_id> ‚Äî (–æ–ø–µ—Ä–∞—Ç–æ—Ä) –≤—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ"
    )

# @router.message(F.text == "üé° –°—Ç–µ–Ω–¥—ã")
# async def cmd_events(message: Message):
#     headers = {}
#     if BOT_SECRET:
#         headers["X-BOT-SECRET"] = BOT_SECRET
#     try:
#         async with httpx.AsyncClient() as client:
#             resp = await client.get(api_url("api/events/"), headers=headers, timeout=10.0)
#             resp.raise_for_status()
#             events = resp.json()
#     except Exception:
#         await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤.")
#         return
#
#     if not events:
#         await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤.")
#         return
#
#     text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–µ–Ω–¥—ã:\n" + "\n".join([f"{e['id']}. {e['name']}" for e in events])
#     await message.answer(text)

@router.message(F.text == '')
async def cmd_next(message: types.Message):
    if message.from_user.id not in ADMIN_TG_IDS:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /next <event_id>")
        return
    event_id = parts[1]
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET

    async with httpx.AsyncClient() as client:
        resp = await client.post(api_url(f"api/events/{event_id}/next/"), headers=headers, timeout=10.0)
        resp.raise_for_status()
        data = resp.json()

    if data.get("detail") == "queue_empty":
        await message.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return

    called = data.get("called_user")
    tg = called.get("telegram_id")
    username = called.get("username")
    # —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    await message.answer(f"–í—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({tg})")
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    await bot.send_message(chat_id=tg, text=f"–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å—Ç–µ–Ω–¥ {event_id}! –ü–æ–¥–æ–π–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")


@router.message(CommandStart())
async def start(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=main_menu)
    await state.set_state(Form.name)

@router.message(F.text == "üé° –°—Ç–µ–Ω–¥—ã")
async def btn_show_events(message: types.Message, state: FSMContext):
    # –Ω–µ –ø—Ä–æ—Å–∏–º –∏–º—è ‚Äî –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å—Ç–∞–≤–∏–º –≤ state —á—Ç–æ-—Ç–æ –ø–æ–¥ –∏–º–µ–Ω–µ–º
    # —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞—Ç—å full_name, username
    # –±–µ—Ä–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ telegram, –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∏–Ω–∞—á–µ username, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ
    full_name = message.from_user.full_name or message.from_user.username or ""
    await state.update_data(name=full_name, tg_id=message.from_user.id, username=message.from_user.username)

    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET

    try:
        async with httpx.AsyncClient() as client:
            resp = await client.get(api_url("api/events/"), headers=headers, timeout=10.0)
            resp.raise_for_status()
            events = resp.json()
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤ (—Å–µ—Ä–≤–µ—Ä).")
        return

    if not events:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=e["name"], callback_data=f"ev:{e['id']}")] for e in events
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–Ω–¥:", reply_markup=kb)
    await state.set_state(Form.choose_event)

# 1) –ü–æ–ª—É—á–∞–µ–º –∏–º—è
@router.message()
async def got_name(message: types.Message, state: FSMContext):
    # –ø–æ–∫–∞ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (—á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏/–ø—Ä–æ—á–∏–µ —Ç–µ–∫—Å—Ç—ã –Ω–µ –ª–æ–º–∞–ª–∏)
    if await state.get_state() != Form.name.state:
        return
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–ø–∏—à–∏ –∏–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –¥–∞–ª–µ–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–µ–Ω–¥—ã (—Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏)
    await state.update_data(name=name, tg_id=message.from_user.id, username=message.from_user.username)

    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET
    try:
        async with httpx.AsyncClient() as client:
            resp = await client.get(api_url("api/events/"), headers=headers, timeout=10.0)
            resp.raise_for_status()
            events = resp.json()
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤ (—Å–µ—Ä–≤–µ—Ä).")
        await state.clear()
        return

    if not events:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤.")
        await state.clear()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=e["name"], callback_data=f"ev:{e['id']}")] for e in events
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–Ω–¥:", reply_markup=kb)
    await state.set_state(Form.choose_event)

# 2) –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ –∏ –∫–Ω–æ–ø–∫–∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–û—Ç–º–µ–Ω–∞
@router.callback_query(lambda c: c.data and c.data.startswith("ev:"))
async def ev_info(query: CallbackQuery, state: FSMContext):
    await query.answer()
    event_id = int(query.data.split(":",1)[1])
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET
    # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    async with httpx.AsyncClient() as client:
        resp = await client.get(api_url(f"api/events/"), headers=headers)
        resp.raise_for_status()
        events = resp.json()
    ev = next((e for e in events if e["id"]==event_id), None)
    if not ev:
        await query.message.answer("–û—à–∏–±–∫–∞: —Å—Ç–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    eta_text = f"–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è: {ev.get('avg_service_minutes', 3)} –º–∏–Ω—É—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞"
    text = f"–°—Ç–µ–Ω–¥: {ev['name']}\n{ev.get('description','')}\n\n{eta_text}\n\n–ù–∞–∂–º–∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å."
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{event_id}"),
         InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ])
    await query.message.answer(text, reply_markup=kb)
    await state.update_data(selected_event=event_id)
    await state.set_state(Form.confirm_event)

@router.callback_query(lambda c: c.data == "cancel_action")
async def cancel_action_cb(query: CallbackQuery, state: FSMContext):
    await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()

# 3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API
@router.callback_query(lambda c: c.data and c.data.startswith("confirm:"))
async def confirm_join_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    data = await state.get_data()
    name = data.get("name")
    tg_id = data.get("tg_id")
    username = data.get("username")
    event_id = int(query.data.split(":",1)[1])

    payload = {"telegram_id": tg_id, "username": username, "full_name": name}
    headers = {"Content-Type":"application/json"}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET

    async with httpx.AsyncClient() as client:
        try:
            resp = await client.post(api_url(f"api/events/{event_id}/join/"), json=payload, headers=headers, timeout=10.0)
            resp.raise_for_status()
            result = resp.json()
        except httpx.HTTPStatusError as e:
            await query.message.answer(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e.response.status_code}")
            await state.clear()
            return
        except Exception as e:
            await query.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: {e}")
            await state.clear()
            return

    pos = result.get("position")
    eta = result.get("eta_minutes")
    await query.message.answer(f"–¢—ã –≤—Å—Ç–∞–ª –≤ –æ—á–µ—Ä–µ–¥—å. –¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è: {pos}. –û—Ü–µ–Ω–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è: ~{eta} –º–∏–Ω.",
                               reply_markup=InlineKeyboardMarkup(
                                   inline_keyboard=[
                                       [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å",
                                                             callback_data=f"leave:{event_id}")]
                                   ]
                               ))
    await state.clear()

# 4) –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@router.callback_query(lambda c: c.data and c.data.startswith("leave:"))
async def leave_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    event_id = int(query.data.split(":",1)[1])
    tg_id = query.from_user.id
    headers = {}
    if BOT_SECRET:
        headers["X-BOT-SECRET"] = BOT_SECRET
    async with httpx.AsyncClient() as client:
        resp = await client.post(api_url(f"api/events/{event_id}/leave/"), json={"telegram_id": tg_id}, headers=headers, timeout=10.0)
    await query.message.answer("–¢—ã –≤—ã—à–µ–ª –∏–∑ –æ—á–µ—Ä–µ–¥–∏." if resp.json().get("removed") else "–¢—ã –Ω–µ –±—ã–ª –≤ –æ—á–µ—Ä–µ–¥–∏.")
